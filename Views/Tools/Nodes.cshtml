@section head
{
    <style>
        #map {
            width: 100%;
            height: 600px;
        }

        .num_nodes_bold {
            font-weight: bold;
        }

        .gm-style-pbc {
            background: transparent !important;
        }

        td img {
            width: 16px;
        }
    </style>
}

@section script
{
    <script>

        var vm = new Vue({
            el: "#app",
            data: {
                net: M_NET,
                page: 1,
                nodesData: {},
                mapNodes: []
            },
            methods: {
                getData: function (p) {
                    $.get(`${M_API}/GetNodesData/${p}`)
                        .done(function (data) {
                            vm.page = data.page;
                            vm.nodesData = data;
                            vm.mapNodes = data.nodes.filter(function(node) {
                                return node.latitude != 0 && node.longitude != 0;
                            });
                            initMap(data.nodes);
                        });
                }
            },
            created: function () {
                this.getData(this.page);
            }
        });

        function initMap() {

            var map = new google.maps.Map(document.getElementById('map'),
                {
                    zoom: 2,
                    center: { lat: 0, lng: 0 }
                });


            // ReSharper disable once UnusedParameter
            const markers = vm.mapNodes.map(function (location, i) {
                let platformName = location.platform == 0 ? 'Linux' : 'Windows';
                const contentString = `<table>
                                            <th>IP:</th>
                                            <td>${location.ip}</td>
                                        </tr>
                                        <tr>
                                            <th>Version:</th>
                                            <td>v${location.version}</td>
                                        </tr>
                                        <tr>
                                            <th>Platform:</th>
                                            <td>${platformName}</td>
                                        </tr>
                                        <tr>
                                            <th>Country:</th>
                                            <td>${location.countryName}</td>
                                        </tr>
                                    </table>`;

                var infoWindow = new google.maps.InfoWindow({
                    content: contentString
                });
                var marker = new google.maps.Marker({
                    position: { lat: location.latitude, lng: location.longitude },
                    label: location.ip
                });
                marker.addListener('click',
                    function () {
                        infoWindow.open(map, marker);
                    });
                return marker;
            });

            // ReSharper disable once UnusedLocals
            const markerCluster = new MarkerClusterer(map,
                markers,
                {
                    imagePath: 'https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/m'
                });
        }

    </script>

    <script src="https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/markerclusterer.js"></script>
    <script async defer src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBe3Iz49Wcl-oPUXjLMzt3IIVZ5LDgihMM&callback=initMap&language=en"></script>

}


<h4 class="my-3">Credits Network Nodes</h4>
<h6 class="my-2">All working nodes in the network</h6>

<div id="map"></div>

<div class="mt-4">Nodes {{nodesData.numStr}} (<span class="text-success">{{nodesData.onlineCount}} Online</span>, <span class="text-danger"> {{nodesData.offlineCount}} Offline</span>)</div>
<pb :page="page" :getfn="getData" :next="nodesData.haveNextPage" :last="nodesData.lastPage"></pb>
<div class="table-responsive">
    <table class="table table-sm table-striped border-bottom border-primary table_info_nodes">
        <thead class="thead-light">
            <tr>
                <th> </th>
                <th>IP</th>
                <th>Node public key</th>
                <th>Country</th>
                <th>OS</th>
                <th>Count Trust</th>
                <th>Time Registration</th>
                <th>Time Active</th>
                <th>Total Fee</th>
                <th>Blocks Written</th>
            </tr>
        </thead>
        <tbody>
            <tr v-for="item in nodesData.nodes">
                <td v-if="item.active" class="text-success">▲</td>
                <td v-else class="text-danger">▼</td>
                <td>{{item.ip}}</td>
                <td class="hash"><a :href="net + '/tools/node/' + item.publicKey">{{item.publicKey}}</a></td>
                <td><img :src="'https://www.countryflags.io/'+item.country+'/shiny/32.png'" alt=""> {{item.countryName}}</td>
                <td v-if="item.platform == 0"><img src="/img/Linux.png" alt=""></td>
                <td v-else-if="item.platform == 1"><img src="/img/macos.png" alt=""></td>
                <td v-else><img src="/img/Windows.png" alt=""></td>
                <td>{{item.countTrust}}</td>
                <td>{{formatDateTime(item.timeRegistration)}}</td>
                <td>{{getTimeSpan(item.timeActive)}}</td>
                <td>{{item.totalFee}}</td>
                <td>{{item.timesWriter}}</td>
            </tr>
        </tbody>
    </table>
</div>
<pb :page="page" :getfn="getData" :next="nodesData.aveNextPage" :last="nodesData.lastPage"></pb>

