@section head
{
    <style>
        #map {
            width: 100%;
            height: 600px;
        }

        .num_nodes_bold {
            font-weight: bold;
        }

        .gm-style-pbc {
            background: transparent !important;
        }

        td img {
            width: 16px;
        }
    </style>
}

@section script
{
    <script>

        const numPerPage = 15;

        var vm = new Vue({
            el: "#app",
            data: {
                net: M_NET,
                allNodes: [],
                page: 1,
                haveNextPage: false,
                lastPage: 1,
                nodes: [],
                showKey: false
            },
            methods: {
                getNodes: function (p) {
                    this.lastPage = Math.ceil(this.allNodes.length / numPerPage);
                    this.nodes = this.allNodes.slice(numPerPage * (p - 1), numPerPage * p);
                    this.page = p;
                    this.haveNextPage = this.allNodes.length > (numPerPage * p);
                },
                getData: function () {
                    $.get(`${M_API}/GetNodesData`)
                        .done(function (data) {
                            vm.allNodes = data.nodes;
                            vm.showKey = data.showKey;
                            vm.getNodes(vm.page);
                            //initMap();
                        });
                }
            },
            created: function() {
                this.getData();
            }
        });

        function initMap() {

            var map = new google.maps.Map(document.getElementById('map'), {
                zoom: 2,
                center: { lat: 0, lng: 0 }
            });


            // ReSharper disable once UnusedParameter
            const markers = vm.allNodes.map(function (location, i) {
                const contentString = `${location.ip}<table>
                                            <tr>
                                                <th>Version:</th>
                                                <td>v${location.version}</td>
                                            </tr>
                                            <tr>
                                                <th>Platform:</th>
                                                <td>MS Windows</td>
                                            </tr>
                                            <tr>
                                                <th>Port:</th>
                                                <td>8080</td>
                                            </tr>
                                            <tr>
                                                <th>Country:</th>
                                                <td>${location.country_name}</td>
                                            </tr>
                                            <tr>
                                                <th>City/town:</th>
                                                <td>${location.city}</td>
                                            </tr>
                                            <tr>
                                                <th>Sum of all transactions:</th>
                                                <td>1500 CS</td>
                                            </tr>
                                            <tr>
                                                <th>Total of transactions:</th>
                                                <td>125</td>
                                            </tr>
                                        </table>`;

                var infowindow = new google.maps.InfoWindow({
                    content: contentString
                });
                var marker = new google.maps.Marker({
                    position: { lat: location.latitude, lng: location.longitude },
                    label: location.ip
                });
                marker.addListener('click', function () {
                    infowindow.open(map, marker);
                });
                return marker;
            });

            // ReSharper disable once UnusedLocals
            const markerCluster = new MarkerClusterer(map, markers,
                { imagePath: 'https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/m' });
        }

    </script>

    @*<script src="https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/markerclusterer.js"></script>
        <script async defer src="https://maps.googleapis.com/maps/api/js?key=AIzaSyB86wLJLpWIilKtb4olAjfUT9HV35J5Tt0&callback=initMap&language=en"></script>*@

}


<h4 class="my-3">Credits Network Nodes</h4>
<h6 class="my-2">All working nodes in the network</h6>

@*<div id="map"></div>*@

<div class="mt-4">Number of nodes: {{allNodes.length}}</div>
<pb :page="page" :getfn="getNodes" :next="haveNextPage" :last="lastPage"></pb>
<div class="table-responsive">
    <table class="table table-sm table-striped border-bottom border-primary table_info_trans">
        <thead class="thead-light">
            <tr>
                <th>IP</th>
                <th v-show="showKey">Public key</th>
                <th>Country</th>
                <th>Version</th>
                <th>Platform</th>
            </tr>
        </thead>
        <tbody>
            <tr v-for="item in nodes">
                <td>{{item.ip}}</td>
                <td v-show="showKey">{{item.publicKey}}</td>
                <td><img :src="'https://www.countryflags.io/'+item.country+'/shiny/32.png'" alt=""> {{item.countryName}}</td>
                <td>v{{item.version}}</td>
                <td v-if="item.platform == 0"><img src="/img/Linux.png" alt=""> Linux</td>
                <td v-else-if="item.platform == 1"><img src="/img/macos.png" alt=""> Mac OS</td>
                <td v-else><img src="/img/Windows.png" alt=""> Windows</td>
            </tr>
        </tbody>
    </table>
</div>
<pb :page="page" :getfn="getNodes" :next="haveNextPage" :last="lastPage"></pb>

