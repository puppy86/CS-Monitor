@section head
    {
    <script src="https://cdn.jsdelivr.net/npm/vivagraphjs@0.10.1/dist/vivagraph.min.js"></script>

    <style>

        #graph-container {
            width: 750px;
            height: 520px;
            overflow: hidden;
            margin: 5px;
        }

        svg {
            border: 1px solid #333;
            margin: 0;
            width: 750px;
            height: 520px;
        }

        .block {
            background: #ff6236;
            fill: #ff6236;
        }

        .account {
            background: #0077bd;
            fill: #0077bd;
        }

        .tx {
            background: #3c5068;
            fill: #3c5068;
        }

        .credit {
            background: #008722;
            fill: #008722;
            font-size: smaller;
        }

        .debit {
            background: #c80039;
            fill: #c80039;
            font-size: smaller;
        }
    </style>
}

@section script
    {
    <script>

        var vm = new Vue({
            el: "#app",
            data: {
                gData: @Html.Raw(Json.Serialize(Model)),
                timer: ''
            },
            methods: {
                getData: function() {
                    $.get(`${M_API}/GetGraphData`)
                        .done(function(data) {
                            vm.gData = data;
                            initGraph(data);
                        });
                },
                getNumOfType: function(t) {
                    return this.gData.nodes.filter(function (n) { return n.type === t }).length;
                }
            },
            created: function() {
                //this.timer = setInterval(this.getData, 2000);
                this.getData();
            },
            beforeDestroy() {
                //clearInterval(this.timer);
            }
        });

        function initGraph(graphData) {

            var graphics = Viva.Graph.View.svgGraphics();
            var defs = Viva.Graph.svg('defs');
            graphics.getSvgRoot().append(defs);
            graphics.node(function(node) {
                return Viva.Graph.svg('circle')
                    .attr('cx', node.data.size)
                    .attr('cy', node.data.size)
                    .attr('class', node.data.type)
                    .attr('r', node.data.size);
            }).placeNode(function(nodeUI, pos) {
                nodeUI.attr('transform',
                    `translate(${pos.x - nodeUI.node.data.size}, ${pos.y - nodeUI.node.data.size})`);
            });

            var graph = constructGraph();
            var renderer = Viva.Graph.View.renderer(graph,
                {
                    graphics: graphics,
                    container: document.getElementById('graph-container')
                });

            renderer.run();

            function constructGraph() {
                const graph = Viva.Graph.graph();
                graphData.nodes.map(function(node, i) {
                    graph.addNode(i, node);
                });
                graphData.links.map(function(link) {
                    graph.addLink(link.node1, link.node2);
                });

                return graph;
            }
        }
    </script>
}

<nav aria-label="breadcrumb mt-2">
    <ol class="breadcrumb">
        <li class="breadcrumb-item"><a :href="net + '/index'">Home</a></li>
        <li class="breadcrumb-item active" aria-current="page">Activity Graph</li>
    </ol>
</nav>


<h4 class="my-3">Activity Graph</h4>

<div class="whitepanel">
    <div class="sub_text">The following is a live graphical visualization of the credits blockchain. Upon initialization only the latest block is shown. Subsequent blocks are added to the graph as they are forged by the network. After reaching a maximum of blocks, the graph will automatically reset to the current block height and start again.</div>
    <div class="col2 ActivityGraph">
        <div class="left padding_10">
            <div>
                <span class="label block">Block</span>
                <span class="label account">Account</span>
                <span class="label tx">Tx</span>
                <span class="label credit">Credit</span>
                <span class="label debit">Debit</span>
            </div>

            <div id="graph-container"></div>

        </div>
        <div class="right padding_10">
            <p class="title mrg_top_0">Navigation</p>
            <p>
                To zoom in and out, use the pinch-to-zoom motion on the trackpad/touchscreen or scroll the mouse wheel. To pan around the canvas tap/click and drag. Double tap/click on a node to focus onto it. Single tap/click on a node to inspect it.
            </p>
            <p class="title mrg_top_0">Statistics</p>
            <table class="table_info_trans">
                <tbody>
                    <tr>
                        <th>Txs</th>
                        <td>{{getNumOfType("tx")}}</td>
                    </tr>
                    <tr>
                        <th>Volume</th>
                        <td>0</td>
                    </tr>
                    <tr>
                        <th>Blocks</th>
                        <td>{{getNumOfType("block")}}</td>
                    </tr>
                    <tr>
                        <th>Timespan</th>
                        <td>0</td>
                    </tr>
                    <tr>
                        <th>Accounts</th>
                        <td>{{getNumOfType("account")}}</td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>
</div>
