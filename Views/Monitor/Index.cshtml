@using Microsoft.AspNetCore.Routing
@{
    var network = Context.GetRouteData().Values["network"].ToString();
}
@section head
{
    <script src="https://cdn.jsdelivr.net/npm/greensock@1.20.2/dist/TweenMax.min.js"></script>
}
@section script
{
    <script>
        $("#navItemHome").addClass("active");

        var model = @Html.Raw(Json.Serialize(Model));
        var st = @Html.Raw(Json.Serialize(ViewData["stats"]));
        const numPerPage = 10;

        var vm = new Vue({
            el: "#app",
            data: {
                net: M_NET,
                activeTab: "last24Hours",
                stats: st,
                model: model,
                page: 1,
                haveNextPage: false,
                lastPage: 1,
                allPools: [],
                pools: [],
                transactions: [],
                lastTx: '',
                filterEmpty: false,
                lastBlock: 0,
                colors: ['red', 'green', 'blue', 'magenta', 'cyan', 'gray', 'yellow', 'pink', 'violet', 'orange']
            },
            computed: {
                animatedLastBlock: function() {
                    return this.lastBlock > 0 ? this.lastBlock.toFixed(0) : 0;
                }
            },
            methods: {
                getPools: function(p) {
                    var filteredPools = this.allPools.filter(function(pool) {
                        return !vm.filterEmpty || pool.txCount > 0;
                    });
                    this.lastPage = Math.ceil(filteredPools.length / numPerPage);
                    if (this.lastPage === 0) this.lastPage = 1;
                    const pg = p > this.lastPage ? this.lastPage : p;
                    this.pools = filteredPools.slice(numPerPage * (pg - 1), numPerPage * pg);
                    this.page = pg;
                    this.haveNextPage = pg < this.lastPage;
                },
                getData: function() {
                    $.get(`${M_API}/IndexData?id=${this.model.lastBlockData.lastBlock}&lastTx=${this.lastTx}`)
                        .done(function(data) {
                            vm.model = data;
                            vm.transactions = data.lastTransactions.concat(vm.transactions).slice(0, 10);
                            if (vm.transactions.length > 0)
                                vm.lastTx = vm.transactions[0].id;
                            for (let i = data.lastBlocks.length-1; i >= 0; i--) {
                                vm.allPools.splice(0, 0, data.lastBlocks[i]);
                            }
                            vm.allPools.splice(100, vm.allPools.length-100);
                            vm.getPools(vm.page);
                            if (vm.lastBlock === 0) {
                                vm.lastBlock = data.lastBlockData.lastBlock - 4;                               
                            }
                            TweenLite.to(vm.$data, 1.25, { lastBlock: data.lastBlockData.lastBlock }, 0, Linear);
                        })
                        .always(function() {
                            setTimeout(vm.getData, 1000);
                        });
                },
                getStats: function() {
                    $.get(`${M_API}/GetStatData`)
                        .done(function(data) {
                            vm.stats = data;
                        })
                        .always(function() {
                            setTimeout(vm.getStats, 10000);
                        });
                }
            },
            created: function() {
                this.getData();
                setTimeout(this.getStats, 10000);
            }
        });
    </script>
}

<div class="row mt-1">
    <div class="col-12 col-md-4 my-3">
        <div class="card h-100 " >
            <h6 class="card-header">Top Block</h6>
            <div class="card-body">
                <h3 class="card-title text-primary">{{animatedLastBlock}}</h3>
            </div>
        </div>
    </div>
    <div class="col-12 col-md-8 my-3">
        <ul class="nav nav-tabs border-bottom-0">
            <li class="nav-item" v-bind:class="{bgActiveTab:activeTab === 'last24Hours'}">
                <a class="nav-link" v-bind:class="{active: activeTab === 'last24Hours'}" href="#" v-on:click="activeTab = 'last24Hours'">24 hours</a>
            </li>
            <li class="nav-item d-none d-sm-block" v-bind:class="{bgActiveTab:activeTab === 'lastWeek'}">
                <a class="nav-link" v-bind:class="{active: activeTab === 'lastWeek'}" href="#" v-on:click="activeTab = 'lastWeek'">Last week</a>
            </li>
            <li class="nav-item d-none d-sm-block" v-bind:class="{bgActiveTab:activeTab === 'lastMonth'}">
                <a class="nav-link" v-bind:class="{active: activeTab === 'lastMonth'}" href="#" v-on:click="activeTab = 'lastMonth'">Last month</a>
            </li>
            <li class="nav-item" v-bind:class="{bgActiveTab:activeTab === 'total'}">
                <a class="nav-link" v-bind:class="{active: activeTab === 'total'}" href="#" v-on:click="activeTab = 'total'">Total</a>
            </li>
        </ul>
        <div class="tab-content d-none d-sm-block">
            <table class="table border-bottom mb-0">
                <thead class="thead-light">
                <tr>
                    <th class="align-text-top">Txs count</th>
                    <th class="align-text-top">All blocks</th>
                    <th class="align-text-top">Volume</th>
                    <th class="align-text-top">Smart<br/>contracts</th>
                    <th class="align-text-top">Txs count<br/><em><span style="font-weight:normal">in contracts</span></em></th>
                </tr>
                </thead>
                <tbody>
                <tr>
                    <td>{{stats[activeTab].allTransactions.value}}</td>
                    <td>{{stats[activeTab].allBlocks.value}}</td>
                    <td>{{stats[activeTab].csVolume.value}}</td>
                    <td>{{stats[activeTab].smartContracts.value}}</td>
                    <td>{{stats[activeTab].scTransactions.value}}</td>
                </tr>
                </tbody>
            </table>
        </div>
        <div class="tab-content d-block d-sm-none">
            <table class="table border-bottom mb-0">
                <tr>
                    <th scope="row">Txs count</th>
                    <td>{{stats[activeTab].allTransactions.value}}</td>
                </tr>
                <tr>
                    <th scope="row">All blocks</th>
                    <td>{{stats[activeTab].allBlocks.value}}</td>
                </tr>
                <tr>
                    <th scope="row">Volume</th>
                    <td>{{stats[activeTab].csVolume.value}}</td>
                </tr>
                <tr>
                    <th scope="row">Smart contracts count</th>
                    <td>{{stats[activeTab].smartContracts.value}}</td>
                </tr>
                <tr>
                    <th scope="row">Txs count in contracts</th>
                    <td>{{stats[activeTab].scTransactions.value}}</td>
                </tr>
            </table>
        </div>
    </div>
</div>

<div id="cubes" class="row mb-3">
    <div class="col-12">
        <transition-group id="ContainerBlock" name="list-complete" tag="div">
            <div v-for="item in allPools" v-bind:key="item" class="perspective list-complete-item">
                <a :href="net + '/block/' + item.hash">
                    <div class="Block">
                        <div class="side front">
                            <div class="title_hash">
                                Hash
                            </div>
                            <div class="hash">
                                {{item.hash}}
                            </div>
                        </div>
                        <div class="side top"></div>
                        <div class="side right">
                            <table>
                                <tr>
                                    <th>Block</th>
                                    <td>
                                        {{item.number}}
                                    </td>
                                </tr>
                                <tr>
                                    <th>Status</th>
                                    <td class="text-success">Success</td>
                                </tr>
                                <tr>
                                    <th>Date</th>
                                    <td>{{formatDate(item.time)}}</td>
                                </tr>
                                <tr>
                                    <th>Time</th>
                                    <td>{{formatTime(item.time)}}</td>
                                </tr>
                                <tr>
                                    <th>Txs count</th>
                                    <td>{{item.txCount}}</td>
                                </tr>
                            </table>
                        </div>
                    </div>
                </a>
            </div>
        </transition-group>
    </div>
</div>

<div class="row">
    <div class="col-12 col-md-6 mb-3">
        <div class="d-flex justify-content-between">
            <h5>Blocks</h5>
            <a class="btn btn-outline-secondary btn-sm mb-1" href="~/@network/blocks" role="button">View All</a>
        </div>
        <ul class="list-group">
            <li v-for="item in pools" class="list-group-item flex-column align-items-start p-0">
                <div class="bl2 p-2" v-bind:style="{'border-left-color': colors[item.number%10]}">
                    <div class="d-flex justify-content-between">
                        <h6 class="mb-1 mr-2">#{{item.number}}</h6>
                        <h6 class="mb-1 hash_main"><a :href="net + '/block/' + item.hash">{{item.hash}}</a></h6>
                        <small>{{getAge(item.time)}}</small>
                    </div>
                    <div class="d-flex justify-content-between">
                        <p class="mb-1 hash_main">Writer: <a :href="net + '/tools/node/' + item.writer">{{item.writer}}</a></p>
                    </div>
                    <div class="d-flex justify-content-between">
                        <small>{{item.txCount}} txs</small>
                        <small>Total Fee: {{item.fee}}</small>
                    </div>
                </div>
            </li>
        </ul>
    </div>
    <div class="col-12 col-md-6">
        <div class="d-flex justify-content-between">
            <h5>Transactions</h5>
            <a class="btn btn-outline-secondary btn-sm mb-1" href="~/@network/transactions" role="button">View All</a>
        </div>        
        <ul class="list-group">
            <li v-for="item in transactions" class="list-group-item flex-column align-items-start p-0">
                <div class="bl2 p-2" v-bind:style="{'border-left-color': colors[item.color]}">
                    <div class="d-flex justify-content-between">
                        <h6 class="mb-1 hash_main">TX# <a :href="net + '/transaction/' + item.id">{{item.id}}</a></h6>
                        <small>{{getAge(item.time)}}</small>
                    </div>

                    <div class="d-flex justify-content-between">
                        <p class="mb-1 hash_main">From: <a :href="net + '/account/' + item.fromAccount">{{item.fromAccount}}</a></p>
                        <p class="mb-1 hash_main">To: <a :href="net + '/account/' + item.toAccount">{{item.toAccount}}</a></p>
                    </div>

                    <div class="d-flex justify-content-between">
                        <small>Amount {{item.value}} CS</small>
                        <small>Fee {{item.fee}}</small>
                    </div>
                </div>
            </li>
        </ul>
    </div>
</div>

