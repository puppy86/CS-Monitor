@using Microsoft.AspNetCore.Routing
@{
    var network = Context.GetRouteData().Values["network"].ToString();
}
@section head
{
    <script src="https://cdn.jsdelivr.net/npm/greensock@1.20.2/dist/TweenMax.min.js"></script>
}
@section script
{
    <script>
        $("#navItemHome").addClass("active");

        var model = @Html.Raw(Json.Serialize(Model));
        var st = @Html.Raw(Json.Serialize(ViewData["stats"]));
        const numPerPage = 10;

        var vm = new Vue({
            el: "#app",
            data: {
                net: M_NET,
                activeTab: "last24Hours",
                stats: st,
                model: model,
                page: 1,
                haveNextPage: false,
                lastPage: 1,
                allPools: [],
                pools: [],
                filterEmpty: false,
                lastBlock: 0
            },
            computed: {
                animatedLastBlock: function() {
                    return this.lastBlock > 0 ? this.lastBlock.toFixed(0) : 0;
                }
            },
            methods: {
                getPools: function(p) {
                    var filteredPools = this.allPools.filter(function(pool) {
                        return !vm.filterEmpty || pool.txCount > 0;
                    });
                    this.lastPage = Math.ceil(filteredPools.length / numPerPage);
                    if (this.lastPage === 0) this.lastPage = 1;
                    const pg = p > this.lastPage ? this.lastPage : p;
                    this.pools = filteredPools.slice(numPerPage * (pg - 1), numPerPage * pg);
                    this.page = pg;
                    this.haveNextPage = pg < this.lastPage;
                },
                getData: function() {
                    $.get(`${M_API}/IndexData?id=${this.model.lastBlockData.lastBlock}`)
                        .done(function(data) {
                            vm.model = data;
                            vm.allPools = data.lastBlocks.concat(vm.allPools).slice(0, 100);
                            vm.getPools(vm.page);
                            if (vm.lastBlock === 0)
                                vm.lastBlock = data.lastBlockData.lastBlock - 4;
                            TweenLite.to(vm.$data, 1.25, { lastBlock: data.lastBlockData.lastBlock }, 0, Linear);
                        })
                        .always(function() {
                            setTimeout(vm.getData, 1000);
                        });
                },
                pad: function (num) {
                    var s = `0${num}`;
                    return s.substr(s.length-2);
                },
                getAge: function(time) {
                    var daysDiffInMillSec = new Date(this.model.lastBlockData.now) - new Date(time);
                    if (daysDiffInMillSec < 0) return "0";
                    var daysLeft = Math.floor(daysDiffInMillSec / 86400000);
                    daysDiffInMillSec -= daysLeft * 86400000;
                    var hoursLeft = Math.floor(daysDiffInMillSec / 3600000);
                    daysDiffInMillSec -= hoursLeft * 3600000;
                    var minutesLeft = Math.floor(daysDiffInMillSec / 60000);
                    daysDiffInMillSec -= minutesLeft * 60000;
                    var secLeft = Math.floor(daysDiffInMillSec / 1000);
                    var res = daysLeft !== 0 ? daysLeft + "d " : "";
                    res += hoursLeft !== 0 || daysLeft !== 0 ? this.pad(hoursLeft) + "h " : "";
                    res += this.pad(minutesLeft) + "m " + this.pad(secLeft) + "s";
                    return res;
                },
                getStats: function () {
                    $.get(`${M_API}/GetStatData`)
                        .done(function (data) {
                            vm.stats = data;
                        })
                        .always(function () {
                            setTimeout(vm.getStats, 10000);
                        });
                }
            },
            created: function() {
                this.getData();
                setTimeout(this.getStats, 10000);
            }
        });
    </script>
}

<div class="row justify-content-center">
    <div class="col-12 col-md-8">
        <form id="search-form" action="~/@network/monitor/search" method="post">
            <div class="input-group mb-3">
                <input type="text" name="query" placeholder="Search transaction, block, account, etc" class="form-control">
                <div class="input-group-append">
                    <button class="btn btn-outline-secondary" type="submit">
                        <i class="fa fa-search"></i>
                    </button>
                </div>
            </div>
        </form>
    </div>
</div>

<div class="row my-3">
    <div class="col-12 col-md-4 my-3">
        <div class="card h-100 " >
            <h6 class="card-header">Top Block</h6>
            <div class="card-body">
                <h3 class="card-title text-primary">{{animatedLastBlock}}</h3>
            </div>
        </div>
    </div>
    <div class="col-12 col-md-8 my-3">
        <ul class="nav nav-tabs border-bottom-0">
            <li class="nav-item" v-bind:class="{bgActiveTab:activeTab === 'last24Hours'}">
                <a class="nav-link" v-bind:class="{active: activeTab === 'last24Hours'}" href="#" v-on:click="activeTab = 'last24Hours'">24 hours</a>
            </li>
            <li class="nav-item" v-bind:class="{bgActiveTab:activeTab === 'lastWeek'}">
                <a class="nav-link" v-bind:class="{active: activeTab === 'lastWeek'}" href="#" v-on:click="activeTab = 'lastWeek'">Last week</a>
            </li>
            <li class="nav-item d-none d-sm-block" v-bind:class="{bgActiveTab:activeTab === 'lastMonth'}">
                <a class="nav-link" v-bind:class="{active: activeTab === 'lastMonth'}" href="#" v-on:click="activeTab = 'lastMonth'">Last month</a>
            </li>
            <li class="nav-item" v-bind:class="{bgActiveTab:activeTab === 'total'}">
                <a class="nav-link" v-bind:class="{active: activeTab === 'total'}" href="#" v-on:click="activeTab = 'total'">Total</a>
            </li>
        </ul>
        <div class="tab-content d-none d-sm-block">
            <table class="table border-bottom mb-0">
                <thead class="thead-light">
                    <tr>
                        <th class="align-text-top">Txs count</th>
                        <th class="align-text-top">All blocks</th>
                        <th class="align-text-top">Volume</th>
                        <th class="align-text-top">Smart<br/>contracts</th>
                        <th class="align-text-top">Txs count<br/><em><span style="font-weight:normal">in contracts</span></em></th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>{{stats[activeTab].allTransactions.value}}</td>
                        <td>{{stats[activeTab].allLedgers.value}}</td>
                        <td>{{stats[activeTab].csVolume.value}}</td>
                        <td>{{stats[activeTab].smartContracts.value}}</td>
                        <td>{{stats[activeTab].scTransactions.value}}</td>
                    </tr>
                </tbody>
            </table>
        </div>
        <div class="tab-content d-block d-sm-none">
            <table class="table border-bottom mb-0">
                <tr>
                    <th scope="row">Txs count</th>
                    <td>{{stats[activeTab].allTransactions.value}}</td>
                </tr>
                <tr>
                    <th scope="row">All blocks</th>
                    <td>{{stats[activeTab].allLedgers.value}}</td>
                </tr>
                <tr>
                    <th scope="row">Volume</th>
                    <td>{{stats[activeTab].csVolume.value}}</td>
                </tr>
                <tr>
                    <th scope="row">Smart contracts count</th>
                    <td>{{stats[activeTab].smartContracts.value}}</td>
                </tr>
                <tr>
                    <th scope="row">Txs count in contracts</th>
                    <td>{{stats[activeTab].scTransactions.value}}</td>
                </tr>
            </table>
        </div>
    </div>
</div>

<h3 class="mt-3">Recent {{allPools.length}} blocks</h3>
<div class="row">
    <div class="col">
        <label><input type="checkbox" class="" v-model="filterEmpty" v-on:change="getPools(page);" /><span> Show only blocks with transactions</span></label>
    </div>
</div>
<pb :page="page" :getfn="getPools" :next="haveNextPage" :last="lastPage" :hidelast="true"></pb>
<div class="table-responsive">
    <table class="table table-sm table-striped border-bottom border-primary mb-0 table_info_trans">
        <thead class="thead-light">
            <tr>
                <th>№</th>
                <th>Age</th>
                <th>Status</th>
                <th>Hash</th>
                <th>Tx count</th>
            </tr>
        </thead>
        <tbody>
            <tr v-for="item in pools">
                <td>{{item.number}}</td>
                <td>{{getAge(item.time)}}</td>
                <td class="text-success">Success</td>
                <td class="hash"><a :href="net + '/monitor/ledger/' + item.hash">{{item.hash}}</a></td>
                <td>{{item.txCount}}</td>
            </tr>
        </tbody>
    </table>
</div>
<pb :page="page" :getfn="getPools" :next="haveNextPage" :last="lastPage" :hidelast="true"></pb>
<div class="row justify-content-center my-3">
    <a class="btn btn-outline-primary" href="/@network/monitor/ledgers" role="button">More blocks...</a>
</div>