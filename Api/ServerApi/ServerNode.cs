/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace ServerApi
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class ServerNode : TBase
  {
    private string _ip;
    private string _port;
    private string _version;
    private string _hash;
    private string _publicKey;
    private string _platform;
    private int _countTrust;
    private long _timeRegistration;
    private long _timeActive;

    public string Ip
    {
      get
      {
        return _ip;
      }
      set
      {
        __isset.ip = true;
        this._ip = value;
      }
    }

    public string Port
    {
      get
      {
        return _port;
      }
      set
      {
        __isset.port = true;
        this._port = value;
      }
    }

    public string Version
    {
      get
      {
        return _version;
      }
      set
      {
        __isset.version = true;
        this._version = value;
      }
    }

    public string Hash
    {
      get
      {
        return _hash;
      }
      set
      {
        __isset.hash = true;
        this._hash = value;
      }
    }

    public string PublicKey
    {
      get
      {
        return _publicKey;
      }
      set
      {
        __isset.publicKey = true;
        this._publicKey = value;
      }
    }

    public string Platform
    {
      get
      {
        return _platform;
      }
      set
      {
        __isset.platform = true;
        this._platform = value;
      }
    }

    public int CountTrust
    {
      get
      {
        return _countTrust;
      }
      set
      {
        __isset.countTrust = true;
        this._countTrust = value;
      }
    }

    public long TimeRegistration
    {
      get
      {
        return _timeRegistration;
      }
      set
      {
        __isset.timeRegistration = true;
        this._timeRegistration = value;
      }
    }

    public long TimeActive
    {
      get
      {
        return _timeActive;
      }
      set
      {
        __isset.timeActive = true;
        this._timeActive = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool ip;
      public bool port;
      public bool version;
      public bool hash;
      public bool publicKey;
      public bool platform;
      public bool countTrust;
      public bool timeRegistration;
      public bool timeActive;
    }

    public ServerNode() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Ip = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Port = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                Version = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                Hash = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.String) {
                PublicKey = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.String) {
                Platform = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.I32) {
                CountTrust = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.I64) {
                TimeRegistration = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 9:
              if (field.Type == TType.I64) {
                TimeActive = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("ServerNode");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Ip != null && __isset.ip) {
          field.Name = "ip";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Ip);
          oprot.WriteFieldEnd();
        }
        if (Port != null && __isset.port) {
          field.Name = "port";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Port);
          oprot.WriteFieldEnd();
        }
        if (Version != null && __isset.version) {
          field.Name = "version";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Version);
          oprot.WriteFieldEnd();
        }
        if (Hash != null && __isset.hash) {
          field.Name = "hash";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Hash);
          oprot.WriteFieldEnd();
        }
        if (PublicKey != null && __isset.publicKey) {
          field.Name = "publicKey";
          field.Type = TType.String;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(PublicKey);
          oprot.WriteFieldEnd();
        }
        if (Platform != null && __isset.platform) {
          field.Name = "platform";
          field.Type = TType.String;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Platform);
          oprot.WriteFieldEnd();
        }
        if (__isset.countTrust) {
          field.Name = "countTrust";
          field.Type = TType.I32;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(CountTrust);
          oprot.WriteFieldEnd();
        }
        if (__isset.timeRegistration) {
          field.Name = "timeRegistration";
          field.Type = TType.I64;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(TimeRegistration);
          oprot.WriteFieldEnd();
        }
        if (__isset.timeActive) {
          field.Name = "timeActive";
          field.Type = TType.I64;
          field.ID = 9;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(TimeActive);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("ServerNode(");
      bool __first = true;
      if (Ip != null && __isset.ip) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ip: ");
        __sb.Append(Ip);
      }
      if (Port != null && __isset.port) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Port: ");
        __sb.Append(Port);
      }
      if (Version != null && __isset.version) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Version: ");
        __sb.Append(Version);
      }
      if (Hash != null && __isset.hash) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Hash: ");
        __sb.Append(Hash);
      }
      if (PublicKey != null && __isset.publicKey) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("PublicKey: ");
        __sb.Append(PublicKey);
      }
      if (Platform != null && __isset.platform) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Platform: ");
        __sb.Append(Platform);
      }
      if (__isset.countTrust) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("CountTrust: ");
        __sb.Append(CountTrust);
      }
      if (__isset.timeRegistration) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("TimeRegistration: ");
        __sb.Append(TimeRegistration);
      }
      if (__isset.timeActive) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("TimeActive: ");
        __sb.Append(TimeActive);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
