/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Release
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class TokenTransaction : TBase
  {
    private byte[] _token;
    private TransactionId _transaction;
    private long _time;
    private byte[] _initiator;
    private string _method;
    private List<string> _params;

    public byte[] Token
    {
      get
      {
        return _token;
      }
      set
      {
        __isset.token = true;
        this._token = value;
      }
    }

    public TransactionId Transaction
    {
      get
      {
        return _transaction;
      }
      set
      {
        __isset.transaction = true;
        this._transaction = value;
      }
    }

    public long Time
    {
      get
      {
        return _time;
      }
      set
      {
        __isset.time = true;
        this._time = value;
      }
    }

    public byte[] Initiator
    {
      get
      {
        return _initiator;
      }
      set
      {
        __isset.initiator = true;
        this._initiator = value;
      }
    }

    public string Method
    {
      get
      {
        return _method;
      }
      set
      {
        __isset.method = true;
        this._method = value;
      }
    }

    public List<string> Params
    {
      get
      {
        return _params;
      }
      set
      {
        __isset.@params = true;
        this._params = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool token;
      public bool transaction;
      public bool time;
      public bool initiator;
      public bool method;
      public bool @params;
    }

    public TokenTransaction() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Token = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Transaction = new TransactionId();
                Transaction.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I64) {
                Time = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                Initiator = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.String) {
                Method = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.List) {
                {
                  Params = new List<string>();
                  TList _list58 = iprot.ReadListBegin();
                  for( int _i59 = 0; _i59 < _list58.Count; ++_i59)
                  {
                    string _elem60;
                    _elem60 = iprot.ReadString();
                    Params.Add(_elem60);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("TokenTransaction");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Token != null && __isset.token) {
          field.Name = "token";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(Token);
          oprot.WriteFieldEnd();
        }
        if (Transaction != null && __isset.transaction) {
          field.Name = "transaction";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Transaction.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (__isset.time) {
          field.Name = "time";
          field.Type = TType.I64;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Time);
          oprot.WriteFieldEnd();
        }
        if (Initiator != null && __isset.initiator) {
          field.Name = "initiator";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(Initiator);
          oprot.WriteFieldEnd();
        }
        if (Method != null && __isset.method) {
          field.Name = "method";
          field.Type = TType.String;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Method);
          oprot.WriteFieldEnd();
        }
        if (Params != null && __isset.@params) {
          field.Name = "params";
          field.Type = TType.List;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, Params.Count));
            foreach (string _iter61 in Params)
            {
              oprot.WriteString(_iter61);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("TokenTransaction(");
      bool __first = true;
      if (Token != null && __isset.token) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Token: ");
        __sb.Append(Token);
      }
      if (Transaction != null && __isset.transaction) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Transaction: ");
        __sb.Append(Transaction== null ? "<null>" : Transaction.ToString());
      }
      if (__isset.time) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Time: ");
        __sb.Append(Time);
      }
      if (Initiator != null && __isset.initiator) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Initiator: ");
        __sb.Append(Initiator);
      }
      if (Method != null && __isset.method) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Method: ");
        __sb.Append(Method);
      }
      if (Params != null && __isset.@params) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Params: ");
        __sb.Append(Params);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
