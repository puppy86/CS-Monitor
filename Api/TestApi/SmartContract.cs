/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace TestApi
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class SmartContract : TBase
  {
    private byte[] _deployer;
    private string _sourceCode;
    private byte[] _byteCode;
    private string _hashState;

    public byte[] Address { get; set; }

    public byte[] Deployer
    {
      get
      {
        return _deployer;
      }
      set
      {
        __isset.deployer = true;
        this._deployer = value;
      }
    }

    public string SourceCode
    {
      get
      {
        return _sourceCode;
      }
      set
      {
        __isset.sourceCode = true;
        this._sourceCode = value;
      }
    }

    public byte[] ByteCode
    {
      get
      {
        return _byteCode;
      }
      set
      {
        __isset.byteCode = true;
        this._byteCode = value;
      }
    }

    public string HashState
    {
      get
      {
        return _hashState;
      }
      set
      {
        __isset.hashState = true;
        this._hashState = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool deployer;
      public bool sourceCode;
      public bool byteCode;
      public bool hashState;
    }

    public SmartContract() {
    }

    public SmartContract(byte[] address) : this() {
      this.Address = address;
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_address = false;
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Address = iprot.ReadBinary();
                isset_address = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Deployer = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                SourceCode = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                ByteCode = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.String) {
                HashState = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
        if (!isset_address)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Address not set");
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("SmartContract");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Address == null)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Address not set");
        field.Name = "address";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(Address);
        oprot.WriteFieldEnd();
        if (Deployer != null && __isset.deployer) {
          field.Name = "deployer";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(Deployer);
          oprot.WriteFieldEnd();
        }
        if (SourceCode != null && __isset.sourceCode) {
          field.Name = "sourceCode";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(SourceCode);
          oprot.WriteFieldEnd();
        }
        if (ByteCode != null && __isset.byteCode) {
          field.Name = "byteCode";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(ByteCode);
          oprot.WriteFieldEnd();
        }
        if (HashState != null && __isset.hashState) {
          field.Name = "hashState";
          field.Type = TType.String;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(HashState);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("SmartContract(");
      __sb.Append(", Address: ");
      __sb.Append(Address);
      if (Deployer != null && __isset.deployer) {
        __sb.Append(", Deployer: ");
        __sb.Append(Deployer);
      }
      if (SourceCode != null && __isset.sourceCode) {
        __sb.Append(", SourceCode: ");
        __sb.Append(SourceCode);
      }
      if (ByteCode != null && __isset.byteCode) {
        __sb.Append(", ByteCode: ");
        __sb.Append(ByteCode);
      }
      if (HashState != null && __isset.hashState) {
        __sb.Append(", HashState: ");
        __sb.Append(HashState);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
