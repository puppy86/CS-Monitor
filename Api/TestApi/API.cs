/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace TestApi
{
  public partial class API {
    public interface ISync {
      BalanceGetResult BalanceGet(byte[] address, string currency);
      TransactionGetResult TransactionGet(TransactionId transactionId);
      TransactionsGetResult TransactionsGet(byte[] address, long offset, long limit);
      TransactionFlowResult TransactionFlow(Transaction transaction);
      byte[] GetLastHash();
      PoolListGetResult PoolListGetStable(byte[] hash, long limit);
      PoolListGetResult PoolListGet(long offset, long limit);
      PoolInfoGetResult PoolInfoGet(byte[] hash, long index);
      PoolTransactionsGetResult PoolTransactionsGet(byte[] hash, long offset, long limit);
      StatsGetResult StatsGet();
      SmartContractGetResult SmartContractGet(byte[] address);
      SmartContractsListGetResult SmartContractsListGet(byte[] deployer);
      SmartContractAddressesListGetResult SmartContractAddressesListGet(byte[] deployer);
      TransactionId WaitForSmartTransaction(byte[] smart_public);
      SmartContractsListGetResult SmartContractsAllListGet(long offset, long limit);
    }

    public interface Iface : ISync {
      #if SILVERLIGHT
      IAsyncResult Begin_BalanceGet(AsyncCallback callback, object state, byte[] address, string currency);
      BalanceGetResult End_BalanceGet(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_TransactionGet(AsyncCallback callback, object state, TransactionId transactionId);
      TransactionGetResult End_TransactionGet(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_TransactionsGet(AsyncCallback callback, object state, byte[] address, long offset, long limit);
      TransactionsGetResult End_TransactionsGet(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_TransactionFlow(AsyncCallback callback, object state, Transaction transaction);
      TransactionFlowResult End_TransactionFlow(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_GetLastHash(AsyncCallback callback, object state);
      byte[] End_GetLastHash(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_PoolListGetStable(AsyncCallback callback, object state, byte[] hash, long limit);
      PoolListGetResult End_PoolListGetStable(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_PoolListGet(AsyncCallback callback, object state, long offset, long limit);
      PoolListGetResult End_PoolListGet(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_PoolInfoGet(AsyncCallback callback, object state, byte[] hash, long index);
      PoolInfoGetResult End_PoolInfoGet(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_PoolTransactionsGet(AsyncCallback callback, object state, byte[] hash, long offset, long limit);
      PoolTransactionsGetResult End_PoolTransactionsGet(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_StatsGet(AsyncCallback callback, object state);
      StatsGetResult End_StatsGet(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_SmartContractGet(AsyncCallback callback, object state, byte[] address);
      SmartContractGetResult End_SmartContractGet(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_SmartContractsListGet(AsyncCallback callback, object state, byte[] deployer);
      SmartContractsListGetResult End_SmartContractsListGet(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_SmartContractAddressesListGet(AsyncCallback callback, object state, byte[] deployer);
      SmartContractAddressesListGetResult End_SmartContractAddressesListGet(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_WaitForSmartTransaction(AsyncCallback callback, object state, byte[] smart_public);
      TransactionId End_WaitForSmartTransaction(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_SmartContractsAllListGet(AsyncCallback callback, object state, long offset, long limit);
      SmartContractsListGetResult End_SmartContractsAllListGet(IAsyncResult asyncResult);
      #endif
    }

    public class Client : IDisposable, Iface {
      public Client(TProtocol prot) : this(prot, prot)
      {
      }

      public Client(TProtocol iprot, TProtocol oprot)
      {
        iprot_ = iprot;
        oprot_ = oprot;
      }

      protected TProtocol iprot_;
      protected TProtocol oprot_;
      protected int seqid_;

      public TProtocol InputProtocol
      {
        get { return iprot_; }
      }
      public TProtocol OutputProtocol
      {
        get { return oprot_; }
      }


      #region " IDisposable Support "
      private bool _IsDisposed;

      // IDisposable
      public void Dispose()
      {
        Dispose(true);
      }
      

      protected virtual void Dispose(bool disposing)
      {
        if (!_IsDisposed)
        {
          if (disposing)
          {
            if (iprot_ != null)
            {
              ((IDisposable)iprot_).Dispose();
            }
            if (oprot_ != null)
            {
              ((IDisposable)oprot_).Dispose();
            }
          }
        }
        _IsDisposed = true;
      }
      #endregion


      
      #if SILVERLIGHT
      public IAsyncResult Begin_BalanceGet(AsyncCallback callback, object state, byte[] address, string currency)
      {
        return send_BalanceGet(callback, state, address, currency);
      }

      public BalanceGetResult End_BalanceGet(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_BalanceGet();
      }

      #endif

      public BalanceGetResult BalanceGet(byte[] address, string currency)
      {
        #if !SILVERLIGHT
        send_BalanceGet(address, currency);
        return recv_BalanceGet();

        #else
        var asyncResult = Begin_BalanceGet(null, null, address, currency);
        return End_BalanceGet(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_BalanceGet(AsyncCallback callback, object state, byte[] address, string currency)
      #else
      public void send_BalanceGet(byte[] address, string currency)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("BalanceGet", TMessageType.Call, seqid_));
        BalanceGet_args args = new BalanceGet_args();
        args.Address = address;
        args.Currency = currency;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public BalanceGetResult recv_BalanceGet()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        BalanceGet_result result = new BalanceGet_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "BalanceGet failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_TransactionGet(AsyncCallback callback, object state, TransactionId transactionId)
      {
        return send_TransactionGet(callback, state, transactionId);
      }

      public TransactionGetResult End_TransactionGet(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_TransactionGet();
      }

      #endif

      public TransactionGetResult TransactionGet(TransactionId transactionId)
      {
        #if !SILVERLIGHT
        send_TransactionGet(transactionId);
        return recv_TransactionGet();

        #else
        var asyncResult = Begin_TransactionGet(null, null, transactionId);
        return End_TransactionGet(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_TransactionGet(AsyncCallback callback, object state, TransactionId transactionId)
      #else
      public void send_TransactionGet(TransactionId transactionId)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("TransactionGet", TMessageType.Call, seqid_));
        TransactionGet_args args = new TransactionGet_args();
        args.TransactionId = transactionId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public TransactionGetResult recv_TransactionGet()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        TransactionGet_result result = new TransactionGet_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "TransactionGet failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_TransactionsGet(AsyncCallback callback, object state, byte[] address, long offset, long limit)
      {
        return send_TransactionsGet(callback, state, address, offset, limit);
      }

      public TransactionsGetResult End_TransactionsGet(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_TransactionsGet();
      }

      #endif

      public TransactionsGetResult TransactionsGet(byte[] address, long offset, long limit)
      {
        #if !SILVERLIGHT
        send_TransactionsGet(address, offset, limit);
        return recv_TransactionsGet();

        #else
        var asyncResult = Begin_TransactionsGet(null, null, address, offset, limit);
        return End_TransactionsGet(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_TransactionsGet(AsyncCallback callback, object state, byte[] address, long offset, long limit)
      #else
      public void send_TransactionsGet(byte[] address, long offset, long limit)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("TransactionsGet", TMessageType.Call, seqid_));
        TransactionsGet_args args = new TransactionsGet_args();
        args.Address = address;
        args.Offset = offset;
        args.Limit = limit;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public TransactionsGetResult recv_TransactionsGet()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        TransactionsGet_result result = new TransactionsGet_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "TransactionsGet failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_TransactionFlow(AsyncCallback callback, object state, Transaction transaction)
      {
        return send_TransactionFlow(callback, state, transaction);
      }

      public TransactionFlowResult End_TransactionFlow(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_TransactionFlow();
      }

      #endif

      public TransactionFlowResult TransactionFlow(Transaction transaction)
      {
        #if !SILVERLIGHT
        send_TransactionFlow(transaction);
        return recv_TransactionFlow();

        #else
        var asyncResult = Begin_TransactionFlow(null, null, transaction);
        return End_TransactionFlow(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_TransactionFlow(AsyncCallback callback, object state, Transaction transaction)
      #else
      public void send_TransactionFlow(Transaction transaction)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("TransactionFlow", TMessageType.Call, seqid_));
        TransactionFlow_args args = new TransactionFlow_args();
        args.Transaction = transaction;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public TransactionFlowResult recv_TransactionFlow()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        TransactionFlow_result result = new TransactionFlow_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "TransactionFlow failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetLastHash(AsyncCallback callback, object state)
      {
        return send_GetLastHash(callback, state);
      }

      public byte[] End_GetLastHash(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetLastHash();
      }

      #endif

      public byte[] GetLastHash()
      {
        #if !SILVERLIGHT
        send_GetLastHash();
        return recv_GetLastHash();

        #else
        var asyncResult = Begin_GetLastHash(null, null);
        return End_GetLastHash(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetLastHash(AsyncCallback callback, object state)
      #else
      public void send_GetLastHash()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetLastHash", TMessageType.Call, seqid_));
        GetLastHash_args args = new GetLastHash_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public byte[] recv_GetLastHash()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetLastHash_result result = new GetLastHash_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetLastHash failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_PoolListGetStable(AsyncCallback callback, object state, byte[] hash, long limit)
      {
        return send_PoolListGetStable(callback, state, hash, limit);
      }

      public PoolListGetResult End_PoolListGetStable(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_PoolListGetStable();
      }

      #endif

      public PoolListGetResult PoolListGetStable(byte[] hash, long limit)
      {
        #if !SILVERLIGHT
        send_PoolListGetStable(hash, limit);
        return recv_PoolListGetStable();

        #else
        var asyncResult = Begin_PoolListGetStable(null, null, hash, limit);
        return End_PoolListGetStable(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_PoolListGetStable(AsyncCallback callback, object state, byte[] hash, long limit)
      #else
      public void send_PoolListGetStable(byte[] hash, long limit)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("PoolListGetStable", TMessageType.Call, seqid_));
        PoolListGetStable_args args = new PoolListGetStable_args();
        args.Hash = hash;
        args.Limit = limit;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public PoolListGetResult recv_PoolListGetStable()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        PoolListGetStable_result result = new PoolListGetStable_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "PoolListGetStable failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_PoolListGet(AsyncCallback callback, object state, long offset, long limit)
      {
        return send_PoolListGet(callback, state, offset, limit);
      }

      public PoolListGetResult End_PoolListGet(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_PoolListGet();
      }

      #endif

      public PoolListGetResult PoolListGet(long offset, long limit)
      {
        #if !SILVERLIGHT
        send_PoolListGet(offset, limit);
        return recv_PoolListGet();

        #else
        var asyncResult = Begin_PoolListGet(null, null, offset, limit);
        return End_PoolListGet(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_PoolListGet(AsyncCallback callback, object state, long offset, long limit)
      #else
      public void send_PoolListGet(long offset, long limit)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("PoolListGet", TMessageType.Call, seqid_));
        PoolListGet_args args = new PoolListGet_args();
        args.Offset = offset;
        args.Limit = limit;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public PoolListGetResult recv_PoolListGet()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        PoolListGet_result result = new PoolListGet_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "PoolListGet failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_PoolInfoGet(AsyncCallback callback, object state, byte[] hash, long index)
      {
        return send_PoolInfoGet(callback, state, hash, index);
      }

      public PoolInfoGetResult End_PoolInfoGet(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_PoolInfoGet();
      }

      #endif

      public PoolInfoGetResult PoolInfoGet(byte[] hash, long index)
      {
        #if !SILVERLIGHT
        send_PoolInfoGet(hash, index);
        return recv_PoolInfoGet();

        #else
        var asyncResult = Begin_PoolInfoGet(null, null, hash, index);
        return End_PoolInfoGet(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_PoolInfoGet(AsyncCallback callback, object state, byte[] hash, long index)
      #else
      public void send_PoolInfoGet(byte[] hash, long index)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("PoolInfoGet", TMessageType.Call, seqid_));
        PoolInfoGet_args args = new PoolInfoGet_args();
        args.Hash = hash;
        args.Index = index;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public PoolInfoGetResult recv_PoolInfoGet()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        PoolInfoGet_result result = new PoolInfoGet_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "PoolInfoGet failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_PoolTransactionsGet(AsyncCallback callback, object state, byte[] hash, long offset, long limit)
      {
        return send_PoolTransactionsGet(callback, state, hash, offset, limit);
      }

      public PoolTransactionsGetResult End_PoolTransactionsGet(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_PoolTransactionsGet();
      }

      #endif

      public PoolTransactionsGetResult PoolTransactionsGet(byte[] hash, long offset, long limit)
      {
        #if !SILVERLIGHT
        send_PoolTransactionsGet(hash, offset, limit);
        return recv_PoolTransactionsGet();

        #else
        var asyncResult = Begin_PoolTransactionsGet(null, null, hash, offset, limit);
        return End_PoolTransactionsGet(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_PoolTransactionsGet(AsyncCallback callback, object state, byte[] hash, long offset, long limit)
      #else
      public void send_PoolTransactionsGet(byte[] hash, long offset, long limit)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("PoolTransactionsGet", TMessageType.Call, seqid_));
        PoolTransactionsGet_args args = new PoolTransactionsGet_args();
        args.Hash = hash;
        args.Offset = offset;
        args.Limit = limit;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public PoolTransactionsGetResult recv_PoolTransactionsGet()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        PoolTransactionsGet_result result = new PoolTransactionsGet_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "PoolTransactionsGet failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_StatsGet(AsyncCallback callback, object state)
      {
        return send_StatsGet(callback, state);
      }

      public StatsGetResult End_StatsGet(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_StatsGet();
      }

      #endif

      public StatsGetResult StatsGet()
      {
        #if !SILVERLIGHT
        send_StatsGet();
        return recv_StatsGet();

        #else
        var asyncResult = Begin_StatsGet(null, null);
        return End_StatsGet(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_StatsGet(AsyncCallback callback, object state)
      #else
      public void send_StatsGet()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("StatsGet", TMessageType.Call, seqid_));
        StatsGet_args args = new StatsGet_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public StatsGetResult recv_StatsGet()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        StatsGet_result result = new StatsGet_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "StatsGet failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_SmartContractGet(AsyncCallback callback, object state, byte[] address)
      {
        return send_SmartContractGet(callback, state, address);
      }

      public SmartContractGetResult End_SmartContractGet(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_SmartContractGet();
      }

      #endif

      public SmartContractGetResult SmartContractGet(byte[] address)
      {
        #if !SILVERLIGHT
        send_SmartContractGet(address);
        return recv_SmartContractGet();

        #else
        var asyncResult = Begin_SmartContractGet(null, null, address);
        return End_SmartContractGet(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_SmartContractGet(AsyncCallback callback, object state, byte[] address)
      #else
      public void send_SmartContractGet(byte[] address)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("SmartContractGet", TMessageType.Call, seqid_));
        SmartContractGet_args args = new SmartContractGet_args();
        args.Address = address;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public SmartContractGetResult recv_SmartContractGet()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        SmartContractGet_result result = new SmartContractGet_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SmartContractGet failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_SmartContractsListGet(AsyncCallback callback, object state, byte[] deployer)
      {
        return send_SmartContractsListGet(callback, state, deployer);
      }

      public SmartContractsListGetResult End_SmartContractsListGet(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_SmartContractsListGet();
      }

      #endif

      public SmartContractsListGetResult SmartContractsListGet(byte[] deployer)
      {
        #if !SILVERLIGHT
        send_SmartContractsListGet(deployer);
        return recv_SmartContractsListGet();

        #else
        var asyncResult = Begin_SmartContractsListGet(null, null, deployer);
        return End_SmartContractsListGet(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_SmartContractsListGet(AsyncCallback callback, object state, byte[] deployer)
      #else
      public void send_SmartContractsListGet(byte[] deployer)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("SmartContractsListGet", TMessageType.Call, seqid_));
        SmartContractsListGet_args args = new SmartContractsListGet_args();
        args.Deployer = deployer;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public SmartContractsListGetResult recv_SmartContractsListGet()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        SmartContractsListGet_result result = new SmartContractsListGet_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SmartContractsListGet failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_SmartContractAddressesListGet(AsyncCallback callback, object state, byte[] deployer)
      {
        return send_SmartContractAddressesListGet(callback, state, deployer);
      }

      public SmartContractAddressesListGetResult End_SmartContractAddressesListGet(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_SmartContractAddressesListGet();
      }

      #endif

      public SmartContractAddressesListGetResult SmartContractAddressesListGet(byte[] deployer)
      {
        #if !SILVERLIGHT
        send_SmartContractAddressesListGet(deployer);
        return recv_SmartContractAddressesListGet();

        #else
        var asyncResult = Begin_SmartContractAddressesListGet(null, null, deployer);
        return End_SmartContractAddressesListGet(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_SmartContractAddressesListGet(AsyncCallback callback, object state, byte[] deployer)
      #else
      public void send_SmartContractAddressesListGet(byte[] deployer)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("SmartContractAddressesListGet", TMessageType.Call, seqid_));
        SmartContractAddressesListGet_args args = new SmartContractAddressesListGet_args();
        args.Deployer = deployer;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public SmartContractAddressesListGetResult recv_SmartContractAddressesListGet()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        SmartContractAddressesListGet_result result = new SmartContractAddressesListGet_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SmartContractAddressesListGet failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_WaitForSmartTransaction(AsyncCallback callback, object state, byte[] smart_public)
      {
        return send_WaitForSmartTransaction(callback, state, smart_public);
      }

      public TransactionId End_WaitForSmartTransaction(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_WaitForSmartTransaction();
      }

      #endif

      public TransactionId WaitForSmartTransaction(byte[] smart_public)
      {
        #if !SILVERLIGHT
        send_WaitForSmartTransaction(smart_public);
        return recv_WaitForSmartTransaction();

        #else
        var asyncResult = Begin_WaitForSmartTransaction(null, null, smart_public);
        return End_WaitForSmartTransaction(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_WaitForSmartTransaction(AsyncCallback callback, object state, byte[] smart_public)
      #else
      public void send_WaitForSmartTransaction(byte[] smart_public)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("WaitForSmartTransaction", TMessageType.Call, seqid_));
        WaitForSmartTransaction_args args = new WaitForSmartTransaction_args();
        args.Smart_public = smart_public;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public TransactionId recv_WaitForSmartTransaction()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        WaitForSmartTransaction_result result = new WaitForSmartTransaction_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "WaitForSmartTransaction failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_SmartContractsAllListGet(AsyncCallback callback, object state, long offset, long limit)
      {
        return send_SmartContractsAllListGet(callback, state, offset, limit);
      }

      public SmartContractsListGetResult End_SmartContractsAllListGet(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_SmartContractsAllListGet();
      }

      #endif

      public SmartContractsListGetResult SmartContractsAllListGet(long offset, long limit)
      {
        #if !SILVERLIGHT
        send_SmartContractsAllListGet(offset, limit);
        return recv_SmartContractsAllListGet();

        #else
        var asyncResult = Begin_SmartContractsAllListGet(null, null, offset, limit);
        return End_SmartContractsAllListGet(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_SmartContractsAllListGet(AsyncCallback callback, object state, long offset, long limit)
      #else
      public void send_SmartContractsAllListGet(long offset, long limit)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("SmartContractsAllListGet", TMessageType.Call, seqid_));
        SmartContractsAllListGet_args args = new SmartContractsAllListGet_args();
        args.Offset = offset;
        args.Limit = limit;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public SmartContractsListGetResult recv_SmartContractsAllListGet()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        SmartContractsAllListGet_result result = new SmartContractsAllListGet_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SmartContractsAllListGet failed: unknown result");
      }

    }
    public class Processor : TProcessor {
      public Processor(ISync iface)
      {
        iface_ = iface;
        processMap_["BalanceGet"] = BalanceGet_Process;
        processMap_["TransactionGet"] = TransactionGet_Process;
        processMap_["TransactionsGet"] = TransactionsGet_Process;
        processMap_["TransactionFlow"] = TransactionFlow_Process;
        processMap_["GetLastHash"] = GetLastHash_Process;
        processMap_["PoolListGetStable"] = PoolListGetStable_Process;
        processMap_["PoolListGet"] = PoolListGet_Process;
        processMap_["PoolInfoGet"] = PoolInfoGet_Process;
        processMap_["PoolTransactionsGet"] = PoolTransactionsGet_Process;
        processMap_["StatsGet"] = StatsGet_Process;
        processMap_["SmartContractGet"] = SmartContractGet_Process;
        processMap_["SmartContractsListGet"] = SmartContractsListGet_Process;
        processMap_["SmartContractAddressesListGet"] = SmartContractAddressesListGet_Process;
        processMap_["WaitForSmartTransaction"] = WaitForSmartTransaction_Process;
        processMap_["SmartContractsAllListGet"] = SmartContractsAllListGet_Process;
      }

      protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
      private ISync iface_;
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public bool Process(TProtocol iprot, TProtocol oprot)
      {
        try
        {
          TMessage msg = iprot.ReadMessageBegin();
          ProcessFunction fn;
          processMap_.TryGetValue(msg.Name, out fn);
          if (fn == null) {
            TProtocolUtil.Skip(iprot, TType.Struct);
            iprot.ReadMessageEnd();
            TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
            x.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
            return true;
          }
          fn(msg.SeqID, iprot, oprot);
        }
        catch (IOException)
        {
          return false;
        }
        return true;
      }

      public void BalanceGet_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        BalanceGet_args args = new BalanceGet_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        BalanceGet_result result = new BalanceGet_result();
        try
        {
          result.Success = iface_.BalanceGet(args.Address, args.Currency);
          oprot.WriteMessageBegin(new TMessage("BalanceGet", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("BalanceGet", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void TransactionGet_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        TransactionGet_args args = new TransactionGet_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        TransactionGet_result result = new TransactionGet_result();
        try
        {
          result.Success = iface_.TransactionGet(args.TransactionId);
          oprot.WriteMessageBegin(new TMessage("TransactionGet", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("TransactionGet", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void TransactionsGet_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        TransactionsGet_args args = new TransactionsGet_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        TransactionsGet_result result = new TransactionsGet_result();
        try
        {
          result.Success = iface_.TransactionsGet(args.Address, args.Offset, args.Limit);
          oprot.WriteMessageBegin(new TMessage("TransactionsGet", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("TransactionsGet", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void TransactionFlow_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        TransactionFlow_args args = new TransactionFlow_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        TransactionFlow_result result = new TransactionFlow_result();
        try
        {
          result.Success = iface_.TransactionFlow(args.Transaction);
          oprot.WriteMessageBegin(new TMessage("TransactionFlow", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("TransactionFlow", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetLastHash_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetLastHash_args args = new GetLastHash_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetLastHash_result result = new GetLastHash_result();
        try
        {
          result.Success = iface_.GetLastHash();
          oprot.WriteMessageBegin(new TMessage("GetLastHash", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("GetLastHash", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void PoolListGetStable_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        PoolListGetStable_args args = new PoolListGetStable_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        PoolListGetStable_result result = new PoolListGetStable_result();
        try
        {
          result.Success = iface_.PoolListGetStable(args.Hash, args.Limit);
          oprot.WriteMessageBegin(new TMessage("PoolListGetStable", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("PoolListGetStable", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void PoolListGet_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        PoolListGet_args args = new PoolListGet_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        PoolListGet_result result = new PoolListGet_result();
        try
        {
          result.Success = iface_.PoolListGet(args.Offset, args.Limit);
          oprot.WriteMessageBegin(new TMessage("PoolListGet", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("PoolListGet", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void PoolInfoGet_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        PoolInfoGet_args args = new PoolInfoGet_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        PoolInfoGet_result result = new PoolInfoGet_result();
        try
        {
          result.Success = iface_.PoolInfoGet(args.Hash, args.Index);
          oprot.WriteMessageBegin(new TMessage("PoolInfoGet", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("PoolInfoGet", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void PoolTransactionsGet_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        PoolTransactionsGet_args args = new PoolTransactionsGet_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        PoolTransactionsGet_result result = new PoolTransactionsGet_result();
        try
        {
          result.Success = iface_.PoolTransactionsGet(args.Hash, args.Offset, args.Limit);
          oprot.WriteMessageBegin(new TMessage("PoolTransactionsGet", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("PoolTransactionsGet", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void StatsGet_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        StatsGet_args args = new StatsGet_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        StatsGet_result result = new StatsGet_result();
        try
        {
          result.Success = iface_.StatsGet();
          oprot.WriteMessageBegin(new TMessage("StatsGet", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("StatsGet", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void SmartContractGet_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        SmartContractGet_args args = new SmartContractGet_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        SmartContractGet_result result = new SmartContractGet_result();
        try
        {
          result.Success = iface_.SmartContractGet(args.Address);
          oprot.WriteMessageBegin(new TMessage("SmartContractGet", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("SmartContractGet", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void SmartContractsListGet_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        SmartContractsListGet_args args = new SmartContractsListGet_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        SmartContractsListGet_result result = new SmartContractsListGet_result();
        try
        {
          result.Success = iface_.SmartContractsListGet(args.Deployer);
          oprot.WriteMessageBegin(new TMessage("SmartContractsListGet", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("SmartContractsListGet", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void SmartContractAddressesListGet_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        SmartContractAddressesListGet_args args = new SmartContractAddressesListGet_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        SmartContractAddressesListGet_result result = new SmartContractAddressesListGet_result();
        try
        {
          result.Success = iface_.SmartContractAddressesListGet(args.Deployer);
          oprot.WriteMessageBegin(new TMessage("SmartContractAddressesListGet", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("SmartContractAddressesListGet", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void WaitForSmartTransaction_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        WaitForSmartTransaction_args args = new WaitForSmartTransaction_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        WaitForSmartTransaction_result result = new WaitForSmartTransaction_result();
        try
        {
          result.Success = iface_.WaitForSmartTransaction(args.Smart_public);
          oprot.WriteMessageBegin(new TMessage("WaitForSmartTransaction", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("WaitForSmartTransaction", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void SmartContractsAllListGet_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        SmartContractsAllListGet_args args = new SmartContractsAllListGet_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        SmartContractsAllListGet_result result = new SmartContractsAllListGet_result();
        try
        {
          result.Success = iface_.SmartContractsAllListGet(args.Offset, args.Limit);
          oprot.WriteMessageBegin(new TMessage("SmartContractsAllListGet", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("SmartContractsAllListGet", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class BalanceGet_args : TBase
    {
      private byte[] _address;
      private string _currency;

      public byte[] Address
      {
        get
        {
          return _address;
        }
        set
        {
          __isset.address = true;
          this._address = value;
        }
      }

      public string Currency
      {
        get
        {
          return _currency;
        }
        set
        {
          __isset.currency = true;
          this._currency = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool address;
        public bool currency;
      }

      public BalanceGet_args() {
        this._currency = "cs";
        this.__isset.currency = true;
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  Address = iprot.ReadBinary();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  Currency = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("BalanceGet_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Address != null && __isset.address) {
            field.Name = "address";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteBinary(Address);
            oprot.WriteFieldEnd();
          }
          if (Currency != null && __isset.currency) {
            field.Name = "currency";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Currency);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("BalanceGet_args(");
        bool __first = true;
        if (Address != null && __isset.address) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Address: ");
          __sb.Append(Address);
        }
        if (Currency != null && __isset.currency) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Currency: ");
          __sb.Append(Currency);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class BalanceGet_result : TBase
    {
      private BalanceGetResult _success;

      public BalanceGetResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public BalanceGet_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new BalanceGetResult();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("BalanceGet_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("BalanceGet_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class TransactionGet_args : TBase
    {
      private TransactionId _transactionId;

      public TransactionId TransactionId
      {
        get
        {
          return _transactionId;
        }
        set
        {
          __isset.transactionId = true;
          this._transactionId = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool transactionId;
      }

      public TransactionGet_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  TransactionId = new TransactionId();
                  TransactionId.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("TransactionGet_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (TransactionId != null && __isset.transactionId) {
            field.Name = "transactionId";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            TransactionId.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("TransactionGet_args(");
        bool __first = true;
        if (TransactionId != null && __isset.transactionId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("TransactionId: ");
          __sb.Append(TransactionId== null ? "<null>" : TransactionId.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class TransactionGet_result : TBase
    {
      private TransactionGetResult _success;

      public TransactionGetResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public TransactionGet_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new TransactionGetResult();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("TransactionGet_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("TransactionGet_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class TransactionsGet_args : TBase
    {
      private byte[] _address;
      private long _offset;
      private long _limit;

      public byte[] Address
      {
        get
        {
          return _address;
        }
        set
        {
          __isset.address = true;
          this._address = value;
        }
      }

      public long Offset
      {
        get
        {
          return _offset;
        }
        set
        {
          __isset.offset = true;
          this._offset = value;
        }
      }

      public long Limit
      {
        get
        {
          return _limit;
        }
        set
        {
          __isset.limit = true;
          this._limit = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool address;
        public bool offset;
        public bool limit;
      }

      public TransactionsGet_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  Address = iprot.ReadBinary();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I64) {
                  Offset = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.I64) {
                  Limit = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("TransactionsGet_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Address != null && __isset.address) {
            field.Name = "address";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteBinary(Address);
            oprot.WriteFieldEnd();
          }
          if (__isset.offset) {
            field.Name = "offset";
            field.Type = TType.I64;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Offset);
            oprot.WriteFieldEnd();
          }
          if (__isset.limit) {
            field.Name = "limit";
            field.Type = TType.I64;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Limit);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("TransactionsGet_args(");
        bool __first = true;
        if (Address != null && __isset.address) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Address: ");
          __sb.Append(Address);
        }
        if (__isset.offset) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Offset: ");
          __sb.Append(Offset);
        }
        if (__isset.limit) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Limit: ");
          __sb.Append(Limit);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class TransactionsGet_result : TBase
    {
      private TransactionsGetResult _success;

      public TransactionsGetResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public TransactionsGet_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new TransactionsGetResult();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("TransactionsGet_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("TransactionsGet_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class TransactionFlow_args : TBase
    {
      private Transaction _transaction;

      public Transaction Transaction
      {
        get
        {
          return _transaction;
        }
        set
        {
          __isset.transaction = true;
          this._transaction = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool transaction;
      }

      public TransactionFlow_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Transaction = new Transaction();
                  Transaction.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("TransactionFlow_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Transaction != null && __isset.transaction) {
            field.Name = "transaction";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Transaction.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("TransactionFlow_args(");
        bool __first = true;
        if (Transaction != null && __isset.transaction) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Transaction: ");
          __sb.Append(Transaction== null ? "<null>" : Transaction.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class TransactionFlow_result : TBase
    {
      private TransactionFlowResult _success;

      public TransactionFlowResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public TransactionFlow_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new TransactionFlowResult();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("TransactionFlow_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("TransactionFlow_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetLastHash_args : TBase
    {

      public GetLastHash_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetLastHash_args");
          oprot.WriteStructBegin(struc);
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetLastHash_args(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetLastHash_result : TBase
    {
      private byte[] _success;

      public byte[] Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetLastHash_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadBinary();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetLastHash_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteBinary(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetLastHash_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class PoolListGetStable_args : TBase
    {
      private byte[] _hash;
      private long _limit;

      public byte[] Hash
      {
        get
        {
          return _hash;
        }
        set
        {
          __isset.hash = true;
          this._hash = value;
        }
      }

      public long Limit
      {
        get
        {
          return _limit;
        }
        set
        {
          __isset.limit = true;
          this._limit = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool hash;
        public bool limit;
      }

      public PoolListGetStable_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  Hash = iprot.ReadBinary();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I64) {
                  Limit = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("PoolListGetStable_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Hash != null && __isset.hash) {
            field.Name = "hash";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteBinary(Hash);
            oprot.WriteFieldEnd();
          }
          if (__isset.limit) {
            field.Name = "limit";
            field.Type = TType.I64;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Limit);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("PoolListGetStable_args(");
        bool __first = true;
        if (Hash != null && __isset.hash) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Hash: ");
          __sb.Append(Hash);
        }
        if (__isset.limit) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Limit: ");
          __sb.Append(Limit);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class PoolListGetStable_result : TBase
    {
      private PoolListGetResult _success;

      public PoolListGetResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public PoolListGetStable_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new PoolListGetResult();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("PoolListGetStable_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("PoolListGetStable_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class PoolListGet_args : TBase
    {
      private long _offset;
      private long _limit;

      public long Offset
      {
        get
        {
          return _offset;
        }
        set
        {
          __isset.offset = true;
          this._offset = value;
        }
      }

      public long Limit
      {
        get
        {
          return _limit;
        }
        set
        {
          __isset.limit = true;
          this._limit = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool offset;
        public bool limit;
      }

      public PoolListGet_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I64) {
                  Offset = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I64) {
                  Limit = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("PoolListGet_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.offset) {
            field.Name = "offset";
            field.Type = TType.I64;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Offset);
            oprot.WriteFieldEnd();
          }
          if (__isset.limit) {
            field.Name = "limit";
            field.Type = TType.I64;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Limit);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("PoolListGet_args(");
        bool __first = true;
        if (__isset.offset) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Offset: ");
          __sb.Append(Offset);
        }
        if (__isset.limit) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Limit: ");
          __sb.Append(Limit);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class PoolListGet_result : TBase
    {
      private PoolListGetResult _success;

      public PoolListGetResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public PoolListGet_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new PoolListGetResult();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("PoolListGet_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("PoolListGet_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class PoolInfoGet_args : TBase
    {
      private byte[] _hash;
      private long _index;

      public byte[] Hash
      {
        get
        {
          return _hash;
        }
        set
        {
          __isset.hash = true;
          this._hash = value;
        }
      }

      public long Index
      {
        get
        {
          return _index;
        }
        set
        {
          __isset.index = true;
          this._index = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool hash;
        public bool index;
      }

      public PoolInfoGet_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  Hash = iprot.ReadBinary();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I64) {
                  Index = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("PoolInfoGet_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Hash != null && __isset.hash) {
            field.Name = "hash";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteBinary(Hash);
            oprot.WriteFieldEnd();
          }
          if (__isset.index) {
            field.Name = "index";
            field.Type = TType.I64;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Index);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("PoolInfoGet_args(");
        bool __first = true;
        if (Hash != null && __isset.hash) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Hash: ");
          __sb.Append(Hash);
        }
        if (__isset.index) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Index: ");
          __sb.Append(Index);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class PoolInfoGet_result : TBase
    {
      private PoolInfoGetResult _success;

      public PoolInfoGetResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public PoolInfoGet_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new PoolInfoGetResult();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("PoolInfoGet_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("PoolInfoGet_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class PoolTransactionsGet_args : TBase
    {
      private byte[] _hash;
      private long _offset;
      private long _limit;

      public byte[] Hash
      {
        get
        {
          return _hash;
        }
        set
        {
          __isset.hash = true;
          this._hash = value;
        }
      }

      public long Offset
      {
        get
        {
          return _offset;
        }
        set
        {
          __isset.offset = true;
          this._offset = value;
        }
      }

      public long Limit
      {
        get
        {
          return _limit;
        }
        set
        {
          __isset.limit = true;
          this._limit = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool hash;
        public bool offset;
        public bool limit;
      }

      public PoolTransactionsGet_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  Hash = iprot.ReadBinary();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I64) {
                  Offset = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.I64) {
                  Limit = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("PoolTransactionsGet_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Hash != null && __isset.hash) {
            field.Name = "hash";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteBinary(Hash);
            oprot.WriteFieldEnd();
          }
          if (__isset.offset) {
            field.Name = "offset";
            field.Type = TType.I64;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Offset);
            oprot.WriteFieldEnd();
          }
          if (__isset.limit) {
            field.Name = "limit";
            field.Type = TType.I64;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Limit);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("PoolTransactionsGet_args(");
        bool __first = true;
        if (Hash != null && __isset.hash) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Hash: ");
          __sb.Append(Hash);
        }
        if (__isset.offset) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Offset: ");
          __sb.Append(Offset);
        }
        if (__isset.limit) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Limit: ");
          __sb.Append(Limit);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class PoolTransactionsGet_result : TBase
    {
      private PoolTransactionsGetResult _success;

      public PoolTransactionsGetResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public PoolTransactionsGet_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new PoolTransactionsGetResult();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("PoolTransactionsGet_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("PoolTransactionsGet_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class StatsGet_args : TBase
    {

      public StatsGet_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("StatsGet_args");
          oprot.WriteStructBegin(struc);
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("StatsGet_args(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class StatsGet_result : TBase
    {
      private StatsGetResult _success;

      public StatsGetResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public StatsGet_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new StatsGetResult();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("StatsGet_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("StatsGet_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SmartContractGet_args : TBase
    {
      private byte[] _address;

      public byte[] Address
      {
        get
        {
          return _address;
        }
        set
        {
          __isset.address = true;
          this._address = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool address;
      }

      public SmartContractGet_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  Address = iprot.ReadBinary();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("SmartContractGet_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Address != null && __isset.address) {
            field.Name = "address";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteBinary(Address);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("SmartContractGet_args(");
        bool __first = true;
        if (Address != null && __isset.address) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Address: ");
          __sb.Append(Address);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SmartContractGet_result : TBase
    {
      private SmartContractGetResult _success;

      public SmartContractGetResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public SmartContractGet_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new SmartContractGetResult();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("SmartContractGet_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("SmartContractGet_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SmartContractsListGet_args : TBase
    {
      private byte[] _deployer;

      public byte[] Deployer
      {
        get
        {
          return _deployer;
        }
        set
        {
          __isset.deployer = true;
          this._deployer = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool deployer;
      }

      public SmartContractsListGet_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  Deployer = iprot.ReadBinary();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("SmartContractsListGet_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Deployer != null && __isset.deployer) {
            field.Name = "deployer";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteBinary(Deployer);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("SmartContractsListGet_args(");
        bool __first = true;
        if (Deployer != null && __isset.deployer) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Deployer: ");
          __sb.Append(Deployer);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SmartContractsListGet_result : TBase
    {
      private SmartContractsListGetResult _success;

      public SmartContractsListGetResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public SmartContractsListGet_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new SmartContractsListGetResult();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("SmartContractsListGet_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("SmartContractsListGet_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SmartContractAddressesListGet_args : TBase
    {
      private byte[] _deployer;

      public byte[] Deployer
      {
        get
        {
          return _deployer;
        }
        set
        {
          __isset.deployer = true;
          this._deployer = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool deployer;
      }

      public SmartContractAddressesListGet_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  Deployer = iprot.ReadBinary();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("SmartContractAddressesListGet_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Deployer != null && __isset.deployer) {
            field.Name = "deployer";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteBinary(Deployer);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("SmartContractAddressesListGet_args(");
        bool __first = true;
        if (Deployer != null && __isset.deployer) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Deployer: ");
          __sb.Append(Deployer);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SmartContractAddressesListGet_result : TBase
    {
      private SmartContractAddressesListGetResult _success;

      public SmartContractAddressesListGetResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public SmartContractAddressesListGet_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new SmartContractAddressesListGetResult();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("SmartContractAddressesListGet_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("SmartContractAddressesListGet_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class WaitForSmartTransaction_args : TBase
    {
      private byte[] _smart_public;

      public byte[] Smart_public
      {
        get
        {
          return _smart_public;
        }
        set
        {
          __isset.smart_public = true;
          this._smart_public = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool smart_public;
      }

      public WaitForSmartTransaction_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  Smart_public = iprot.ReadBinary();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("WaitForSmartTransaction_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Smart_public != null && __isset.smart_public) {
            field.Name = "smart_public";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteBinary(Smart_public);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("WaitForSmartTransaction_args(");
        bool __first = true;
        if (Smart_public != null && __isset.smart_public) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Smart_public: ");
          __sb.Append(Smart_public);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class WaitForSmartTransaction_result : TBase
    {
      private TransactionId _success;

      public TransactionId Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public WaitForSmartTransaction_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new TransactionId();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("WaitForSmartTransaction_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("WaitForSmartTransaction_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SmartContractsAllListGet_args : TBase
    {
      private long _offset;
      private long _limit;

      public long Offset
      {
        get
        {
          return _offset;
        }
        set
        {
          __isset.offset = true;
          this._offset = value;
        }
      }

      public long Limit
      {
        get
        {
          return _limit;
        }
        set
        {
          __isset.limit = true;
          this._limit = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool offset;
        public bool limit;
      }

      public SmartContractsAllListGet_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I64) {
                  Offset = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I64) {
                  Limit = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("SmartContractsAllListGet_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.offset) {
            field.Name = "offset";
            field.Type = TType.I64;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Offset);
            oprot.WriteFieldEnd();
          }
          if (__isset.limit) {
            field.Name = "limit";
            field.Type = TType.I64;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Limit);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("SmartContractsAllListGet_args(");
        bool __first = true;
        if (__isset.offset) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Offset: ");
          __sb.Append(Offset);
        }
        if (__isset.limit) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Limit: ");
          __sb.Append(Limit);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SmartContractsAllListGet_result : TBase
    {
      private SmartContractsListGetResult _success;

      public SmartContractsListGetResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public SmartContractsAllListGet_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new SmartContractsListGetResult();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("SmartContractsAllListGet_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("SmartContractsAllListGet_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }

  }
}
