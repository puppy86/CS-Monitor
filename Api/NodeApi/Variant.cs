/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace NodeApi
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class Variant : TBase
  {
    private bool _v_bool;
    private sbyte _v_i8;
    private short _v_i16;
    private int _v_i32;
    private long _v_i64;
    private double _v_double;
    private string _v_string;
    private List<Variant> _v_list;
    private THashSet<Variant> _v_set;
    private Dictionary<Variant, Variant> _v_map;

    public bool V_bool
    {
      get
      {
        return _v_bool;
      }
      set
      {
        __isset.v_bool = true;
        this._v_bool = value;
      }
    }

    public sbyte V_i8
    {
      get
      {
        return _v_i8;
      }
      set
      {
        __isset.v_i8 = true;
        this._v_i8 = value;
      }
    }

    public short V_i16
    {
      get
      {
        return _v_i16;
      }
      set
      {
        __isset.v_i16 = true;
        this._v_i16 = value;
      }
    }

    public int V_i32
    {
      get
      {
        return _v_i32;
      }
      set
      {
        __isset.v_i32 = true;
        this._v_i32 = value;
      }
    }

    public long V_i64
    {
      get
      {
        return _v_i64;
      }
      set
      {
        __isset.v_i64 = true;
        this._v_i64 = value;
      }
    }

    public double V_double
    {
      get
      {
        return _v_double;
      }
      set
      {
        __isset.v_double = true;
        this._v_double = value;
      }
    }

    public string V_string
    {
      get
      {
        return _v_string;
      }
      set
      {
        __isset.v_string = true;
        this._v_string = value;
      }
    }

    public List<Variant> V_list
    {
      get
      {
        return _v_list;
      }
      set
      {
        __isset.v_list = true;
        this._v_list = value;
      }
    }

    public THashSet<Variant> V_set
    {
      get
      {
        return _v_set;
      }
      set
      {
        __isset.v_set = true;
        this._v_set = value;
      }
    }

    public Dictionary<Variant, Variant> V_map
    {
      get
      {
        return _v_map;
      }
      set
      {
        __isset.v_map = true;
        this._v_map = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool v_bool;
      public bool v_i8;
      public bool v_i16;
      public bool v_i32;
      public bool v_i64;
      public bool v_double;
      public bool v_string;
      public bool v_list;
      public bool v_set;
      public bool v_map;
    }

    public Variant() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Bool) {
                V_bool = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Byte) {
                V_i8 = iprot.ReadByte();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I16) {
                V_i16 = iprot.ReadI16();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I32) {
                V_i32 = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.I64) {
                V_i64 = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.Double) {
                V_double = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.String) {
                V_string = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.List) {
                {
                  V_list = new List<Variant>();
                  TList _list0 = iprot.ReadListBegin();
                  for( int _i1 = 0; _i1 < _list0.Count; ++_i1)
                  {
                    Variant _elem2;
                    _elem2 = new Variant();
                    _elem2.Read(iprot);
                    V_list.Add(_elem2);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 9:
              if (field.Type == TType.Set) {
                {
                  V_set = new THashSet<Variant>();
                  TSet _set3 = iprot.ReadSetBegin();
                  for( int _i4 = 0; _i4 < _set3.Count; ++_i4)
                  {
                    Variant _elem5;
                    _elem5 = new Variant();
                    _elem5.Read(iprot);
                    V_set.Add(_elem5);
                  }
                  iprot.ReadSetEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 10:
              if (field.Type == TType.Map) {
                {
                  V_map = new Dictionary<Variant, Variant>();
                  TMap _map6 = iprot.ReadMapBegin();
                  for( int _i7 = 0; _i7 < _map6.Count; ++_i7)
                  {
                    Variant _key8;
                    Variant _val9;
                    _key8 = new Variant();
                    _key8.Read(iprot);
                    _val9 = new Variant();
                    _val9.Read(iprot);
                    V_map[_key8] = _val9;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("Variant");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.v_bool) {
          field.Name = "v_bool";
          field.Type = TType.Bool;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(V_bool);
          oprot.WriteFieldEnd();
        }
        if (__isset.v_i8) {
          field.Name = "v_i8";
          field.Type = TType.Byte;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteByte(V_i8);
          oprot.WriteFieldEnd();
        }
        if (__isset.v_i16) {
          field.Name = "v_i16";
          field.Type = TType.I16;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI16(V_i16);
          oprot.WriteFieldEnd();
        }
        if (__isset.v_i32) {
          field.Name = "v_i32";
          field.Type = TType.I32;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(V_i32);
          oprot.WriteFieldEnd();
        }
        if (__isset.v_i64) {
          field.Name = "v_i64";
          field.Type = TType.I64;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(V_i64);
          oprot.WriteFieldEnd();
        }
        if (__isset.v_double) {
          field.Name = "v_double";
          field.Type = TType.Double;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(V_double);
          oprot.WriteFieldEnd();
        }
        if (V_string != null && __isset.v_string) {
          field.Name = "v_string";
          field.Type = TType.String;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(V_string);
          oprot.WriteFieldEnd();
        }
        if (V_list != null && __isset.v_list) {
          field.Name = "v_list";
          field.Type = TType.List;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, V_list.Count));
            foreach (Variant _iter10 in V_list)
            {
              _iter10.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (V_set != null && __isset.v_set) {
          field.Name = "v_set";
          field.Type = TType.Set;
          field.ID = 9;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteSetBegin(new TSet(TType.Struct, V_set.Count));
            foreach (Variant _iter11 in V_set)
            {
              _iter11.Write(oprot);
            }
            oprot.WriteSetEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (V_map != null && __isset.v_map) {
          field.Name = "v_map";
          field.Type = TType.Map;
          field.ID = 10;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteMapBegin(new TMap(TType.Struct, TType.Struct, V_map.Count));
            foreach (Variant _iter12 in V_map.Keys)
            {
              _iter12.Write(oprot);
              V_map[_iter12].Write(oprot);
            }
            oprot.WriteMapEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("Variant(");
      bool __first = true;
      if (__isset.v_bool) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("V_bool: ");
        __sb.Append(V_bool);
      }
      if (__isset.v_i8) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("V_i8: ");
        __sb.Append(V_i8);
      }
      if (__isset.v_i16) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("V_i16: ");
        __sb.Append(V_i16);
      }
      if (__isset.v_i32) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("V_i32: ");
        __sb.Append(V_i32);
      }
      if (__isset.v_i64) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("V_i64: ");
        __sb.Append(V_i64);
      }
      if (__isset.v_double) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("V_double: ");
        __sb.Append(V_double);
      }
      if (V_string != null && __isset.v_string) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("V_string: ");
        __sb.Append(V_string);
      }
      if (V_list != null && __isset.v_list) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("V_list: ");
        __sb.Append(V_list);
      }
      if (V_set != null && __isset.v_set) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("V_set: ");
        __sb.Append(V_set);
      }
      if (V_map != null && __isset.v_map) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("V_map: ");
        __sb.Append(V_map);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
